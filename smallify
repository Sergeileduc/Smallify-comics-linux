#!/bin/bash

#v1.0

FILE="$1"
QUALITY="$2"
MAXHEIGHT=$3

REPLACE=1 # 1 is False
WORKING="Working"
FOLDER="Smaller_comics"
PORTRAITSIZE=1000  # in ko
PAYSAGESIZE=2000  # in ko

usage="$(cat <<-EOF
$(basename "$0") file quality height [-h] [-r] [-f folder]
Example :
$(basename "$0") myfile.cbz 70 1920

By default, it saves smallified comics in 'Smaller_comics' default folder.

$(basename "$0") myfile.cbz 70 1920 -r
will REPLACE your comics ! Be careful !!

$(basename "$0") myfile.cbz 70 1920 -f \"my smaller comics\"
will save your smallified comics in \"my smaller comics\"

where:
    -h              show this help text
    -r, --replace   set the 'Replace' flag on ! It replace your comics !
                    Be very careful with this
    -f, --folder    set the folder where to save smallified comics
EOF
)"

shift 3
while :; do
    case $1 in
        -h|-\?|--help)
            #show_help    # Display a usage synopsis.
            echo "$usage"
            exit
            ;;
	    -r|--replace)       # Takes an option argument; ensure it has been specified.
            REPLACE=0
            ;;
        -f|--folder)       # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                FOLDER="$2"
                echo "------Destination folder : '$FOLDER'"
                shift
            else
                die 'ERROR: "--folder" requires a non-empty option argument.'
            fi
            ;;
        --)              # End of all options.
            shift
            break
            ;;
        -?*)
            printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
            ;;
        *)               # Default case: No more options, so break out of the loop.
            break
    esac

    shift
done

function unarchive-comic {
    # If / Elif : unarchive file (rar or zip)
    # Test if archive is RAR
    if [[ $(file --mime-type -b "$FILE") == application/x-rar ]]; then
        echo "------$FILE is rared"
        DIR="${FILE%.*}"
        mkdir -p "$WORKING/$DIR"
        echo "------Extraction de $FILE"
        unrar x ./"$FILE" -o "$WORKING/$DIR" -idq

    # Test if archive is ZIP
    elif [[ $(file --mime-type -b "$FILE") == application/zip ]]; then
        echo "------$FILE is zipped"
        echo "------Nettoyage de __MACOSX, .DS_Store, desktop.ini, Thumbs.db"
        zip -d "$FILE" "__MACOSX*" &>/dev/null
        zip -d "$FILE" "*.DS_Store" &>/dev/null
        zip -d "$FILE" "*desktop.ini" &>/dev/null
        zip -d "$FILE" "*Thumbs.db" &>/dev/null
        DIR="${FILE%.*}"
        mkdir -p "$WORKING/$DIR"
        echo "------Extraction de $FILE"
        unzip -q "$FILE" -d "$WORKING/$DIR"
    else
        echo "------$FILE is not RAR or ZIP"
        exit 1
    fi
}

function smallify-jpeg {
    IMG=$1
    WIDTH=$(identify -format "%w" "$IMG")> /dev/null
    HEIGHT=$(identify -format "%h" "$IMG")> /dev/null
    SIZE=$(du -k "$IMG" | cut -f1)
    PORTRAIT=true
    if (( HEIGHT > WIDTH )); then PORTRAIT=true; else PORTRAIT=false; fi
    # echo "------Dimensions : $WIDTH x $HEIGHT. Poids = $SIZE ko" Portrait ? $PORTRAIT
    if $PORTRAIT ; then
        # echo portrait
        MAXSIZE=$PORTRAITSIZE
    else
        # echo ------paysage
        MAXSIZE=$PAYSAGESIZE
    fi

    # HEIGHT > MAX and SIZE > MAX ?
    if [[ $HEIGHT -gt $MAXHEIGHT && $SIZE -gt $MAXSIZE ]]; then
        # echo "------magick size and quality !"
	    convert "$IMG" -quality "$QUALITY" -geometry x"$MAXHEIGHT" "$IMG"
    # HEIGHT > MAX but SIZE already ok ?
    elif [[ $HEIGHT -gt $MAXHEIGHT && $SIZE -le $MAXSIZE ]]; then
        # echo "------magick size only"
        convert "$IMG" -geometry x"$MAXHEIGHT" "$IMG"
    # HEIGHT is ok (< MAX) but SIZE is too big ?
    elif [[ $SIZE -gt $MAXSIZE ]]; then
        # echo "------magick quality only"
        convert "$IMG" -quality "$QUALITY" "$IMG"
    else
        # echo "------Nothing to do, jpeg already small"
        :
    fi
}

function smallify-png {
    IMG=$1
    HEIGHT=$(identify -format "%h" "$IMG")> /dev/null
    if [[ $HEIGHT > $MAXHEIGHT ]]; then
        # echo "------magick size only (png)"
        convert "$IMG" -geometry x"$MAXHEIGHT" "$IMG"
    fi
}

function archive-comic {
    if [[ $FILE == *.cbz ]]; then
        echo "------Création archive $FILE"
        pushd "$WORKING/$DIR" 1>/dev/null || return
        zip -q -r "../../$FOLDER/$FILE" -- *
        popd 1>/dev/null || return
        rm -r "${WORKING:?}/$DIR"
    elif [[ $FILE == *.cbr ]]; then
        echo "------Création archive $FILE"
        rar a -ma4 -r -ep1 "$FOLDER/$FILE" "$WORKING/$DIR/" -idq
        rm -r "${WORKING:?}/$DIR"
    else
        echo "------Fichier non pris en charge"
    fi
}

function check-comic {
    pushd "$FOLDER" 1>/dev/null || return
    # if [[ $FILE == *.cbz ]]; then
    if [[ $(file --mime-type -b "$FILE") == application/zip ]]; then
        if unzip -tq "$FILE"; then
            echo "------$FILE is OK"
             # 0 = true
             popd 1>/dev/null || return
             return 0
        else
            # 1 = false
            echo "------$FILE is KO !!!!!!!!!"
            popd 1>/dev/null || return
            return 1
        fi
    elif [[ $(file --mime-type -b "$FILE") == application/x-rar ]]; then
        if unrar t "$FILE" -idq; then
            echo "------$FILE is OK"
             # 0 = true
             popd 1>/dev/null || return
             return 0
        else
            echo "------$FILE is KO !!!!!!!!!"
            # 1 = false
            popd 1>/dev/null || return
            return 1
        fi
    else
        echo "------$FILE is not RAR or ZIP"
        exit 1
    fi
}

function move-comic {
    echo "------moving $FILE"
    mv -f "$FOLDER/$FILE" .
}

unarchive-comic

# Smallify jpeg with Image Magick voodoo
echo "------Réduction des images"
pushd "$WORKING/$DIR" 1>/dev/null || return

# smallify all jpg
find . -type f -iname "*.jpg" -print0 | \
    (while read -d $'\0' i; do smallify-jpeg "$i";  done)

# smallify all jpeg
find . -type f -iname "*.jpeg" -print0 | \
    (while read -d $'\0' i; do smallify-jpeg "$i";  done)

# smallify all png
find . -type f -iname "*.png" -print0 | \
    (while read -d $'\0' i; do smallify-png "$i";  done)

popd 1>/dev/null || return

mkdir -p "$FOLDER"

# make new archive
archive-comic

if [[ $REPLACE -eq 0 ]]; then
    echo "------Remplacement des fichiers !!!!"
    # Check integrity and move
    if check-comic; then move-comic; fi
    rmdir "$FOLDER"
else
    if check-comic; then echo "------Fichiers non remplacés, situés dans '$FOLDER'"; fi
fi


# rmdir "$FOLDER"
rmdir $WORKING
